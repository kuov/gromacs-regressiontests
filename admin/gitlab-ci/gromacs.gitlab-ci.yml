# Build, test, and install variously configured GROMACS installations.

# Jobs running in first pre-build stage

.gromacs:base:configure:
  extends:
    - .variables:default
  cache: {}
  stage: configure-build
  variables:
    KUBERNETES_CPU_LIMIT: 1
    KUBERNETES_CPU_REQUEST: 1
    KUBERNETES_MEMORY_LIMIT: 2Gi
    CMAKE_COMPILER_SCRIPT: ""
    CMAKE_EXTRA_OPTIONS: ""
    CMAKE_SIMD_OPTIONS: "-DGMX_SIMD=AUTO"
    CMAKE_MPI_OPTIONS: "-DGMX_THREAD_MPI=ON"
    CMAKE_PRECISION_OPTIONS: "-DGMX_DOUBLE=OFF"
    CMAKE_BUILD_TYPE_OPTIONS: "-DCMAKE_BUILD_TYPE=Debug"
    CMAKE_GPU_OPTIONS: "-DGMX_GPU=OFF"
  script:
    - echo $CMAKE_COMPILER_SCRIPT
    - echo $CMAKE_EXTRA_OPTIONS
    - echo $CMAKE_SIMD_OPTIONS
    - echo $CMAKE_GPU_OPTIONS
    - echo $CMAKE_MPI_OPTIONS
    - echo $CMAKE_PRECISION_OPTIONS
    - echo $CMAKE_BUILD_TYPE_OPTIONS
    - echo $CMAKE_GMXAPI_OPTIONS
    - if [[ -d $BUILD_DIR ]] ; then
      rm -rf $BUILD_DIR && mkdir $BUILD_DIR ;
      else
      echo "Preparing new build directory" ;
      mkdir $BUILD_DIR ;
      fi
    - cd $BUILD_DIR
    - cmake ../gromacs/
      -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      $CMAKE_COMPILER_SCRIPT
      $CMAKE_EXTRA_OPTIONS
      $CMAKE_SIMD_OPTIONS
      $CMAKE_MPI_OPTIONS
      $CMAKE_PRECISION_OPTIONS
      $CMAKE_BUILD_TYPE_OPTIONS
      $CMAKE_GPU_OPTIONS
      $CMAKE_GMXAPI_OPTIONS
      -DCMAKE_INSTALL_PREFIX=../$INSTALL_DIR -DGMX_COMPILER_WARNINGS=ON
      2>&1 | tee cmakeLog.log
    - awk '/CMake Warning/,/^--|^$/' cmakeLog.log | tee cmakeErrors.log
    - if [ -s cmakeErrors.log  ] ; then echo "Found CMake warning while processing build"; cat cmakeErrors.log ; exit 1; fi
    - cd ..
  artifacts:
    when: always
    paths:
      - $BUILD_DIR

# Templates for configuration stage

gromacs:gcc-7:configure:
  extends:
    - .gromacs:base:configure
    - .use-gcc7
    - .rules:always
  needs:
    - job: gromacs:prepare

gromacs:gcc-7-simd-sse41:configure:
  extends:
    - .gromacs:base:configure
    - .use-gcc7
    - .rules:always
  needs:
    - job: gromacs:prepare
  variables:
    CMAKE_SIMD_OPTIONS: "-DGMX_SIMD=SSE4.1"

gromacs:gcc-7-double:configure:
  extends:
    - .gromacs:base:configure
    - .use-gcc7
    - .rules:always
  needs:
    - job: gromacs:prepare
  variables:
    CMAKE_PRECISION_OPTIONS: -DGMX_DOUBLE=ON

gromacs:gcc-8:configure:
  extends:
    - .gromacs:base:configure
    - .use-gcc8
    - .rules:always
  needs:
    - job: gromacs:prepare

gromacs:gcc-8-cuda-10.2:configure:
  extends:
    - .gromacs:base:configure
    - .use-cuda
    - .use-gcc8:cuda-10.2
    - .rules:always
  variables:
    CMAKE_GMXAPI_OPTIONS: "-DGMX_PYTHON_PACKAGE=OFF"
  # TODO: Enable GMX_PYTHON_PACKAGE when dependencies are in Docker image.
  needs:
    - job: gromacs:prepare

# For version of clang before 7, we need to always provide the full version
# Use something like this instead in the download script:
# APT_COMPILER_VERSION=$(($COMPILER_MAJOR_VERSION < 7 ? "${COMPILER_MAJOR_VERSION}.0" : $COMPILER_MAJOR_VERSION))
gromacs:clang-6:configure:
  extends:
    - .gromacs:base:configure
    - .use-clang6
    - .rules:always
  needs:
    - job: gromacs:prepare
  variables:
    COMPILER_MAJOR_VERSION: "6.0"
    CMAKE_MPI_OPTIONS: -DGMX_OPENMP=OFF

gromacs:clang-7:configure:
  extends:
    - .gromacs:base:configure
    - .use-clang7
    - .rules:always
  needs:
    - job: gromacs:prepare

gromacs:clang-8:configure:
  extends:
    - .gromacs:base:configure
    - .use-clang8
    - .rules:always
  needs:
    - job: gromacs:prepare

# Jobs running during build stage

.gromacs:base:build:
  # Dockerfiles are from dockerhub, user eriklindahl
  # image in admin/dockerimages/ci-docs-py27
  stage: build
  script:
    - cd $BUILD_DIR
    - cmake --build . -- -j8 2>&1 | tee buildLogFile.log
    - cmake --build . --target tests -- -j8 2>&1 | tee testBuildLogFile.log
    - awk '/warning/,/warning.*generated|^$/' buildLogFile.log testBuildLogFile.log
      | grep -v "CMake" | tee buildErrors.log || true
    - grep "cannot be built" buildLogFile.log testBuildLogFile.log | tee -a buildErrors.log || true
    - cmake --build . --target install 2>&1 | tee installBuildLogFile.log
    - if [ -s buildErrors.log ] ; then echo "Found compiler warning during build"; cat buildErrors.log; exit 1; fi
    - cd ..
  artifacts:
    when: always
    paths:
      - $BUILD_DIR
      - $INSTALL_DIR/

gromacs:gcc-7:build:
  extends:
    - .gromacs:base:build
    - .use-ccache
    - .variables:default
    - .use-gcc7
    - .rules:always
  needs:
    - job: gromacs:gcc-7:configure
      artifacts: true
    - job: gromacs:prepare

gromacs:gcc-7-simd-sse41:build:
  extends:
    - .gromacs:base:build
    - .use-ccache
    - .variables:default
    - .use-gcc7
    - .rules:always
  needs:
    - job: gromacs:gcc-7-simd-sse41:configure
      artifacts: true
    - job: gromacs:prepare

gromacs:gcc-7-double:build:
  extends:
    - .gromacs:base:build
    - .use-ccache
    - .variables:default
    - .use-gcc7
    - .rules:always
  needs:
    - job: gromacs:gcc-7-double:configure
      artifacts: true
    - job: gromacs:prepare

gromacs:gcc-8:build:
  extends:
    - .gromacs:base:build
    - .use-ccache
    - .variables:default
    - .use-gcc8
    - .rules:always
  needs:
    - job: gromacs:gcc-8:configure
      artifacts: true
    - job: gromacs:prepare

gromacs:gcc-8-cuda-10.2:build:
  extends:
    - .gromacs:base:build
    - .use-ccache
    - .variables:default
    - .use-cuda
    - .use-gcc8:cuda-10.2
    - .rules:always
  variables:
    CMAKE_GMXAPI_OPTIONS: "-DGMX_PYTHON_PACKAGE=OFF"
  # TODO: Enable GMX_PYTHON_PACKAGE when dependencies are in Docker image.
  needs:
    - job: gromacs:gcc-8-cuda-10.2:configure
      artifacts: true
    - job: gromacs:prepare

gromacs:clang-6:build:
  extends:
    - .gromacs:base:build
    - .use-ccache
    - .variables:default
    - .use-clang6
    - .rules:always
  needs:
    - job: gromacs:clang-6:configure
      artifacts: true
    - job: gromacs:prepare

gromacs:clang-7:build:
  extends:
    - .gromacs:base:build
    - .use-ccache
    - .variables:default
    - .use-clang7
    - .rules:always
  needs:
    - job: gromacs:clang-7:configure
      artifacts: true
    - job: gromacs:prepare

gromacs:clang-8:build:
  extends:
    - .gromacs:base:build
    - .use-ccache
    - .variables:default
    - .use-clang8
    - .rules:always
  needs:
    - job: gromacs:clang-8:configure
      artifacts: true
    - job: gromacs:prepare

# Jobs running during test stage

.gromacs:base:test:
  extends:
    - .variables:default
  variables:
    REGRESSIONTEST_TOTAL_RANK_NUMBER: 4
    REGRESSIONTEST_OMP_RANK_NUMBER: 2
    REGRESSIONTEST_PME_RANK_NUMBER: 1
    REGRESSIONTEST_MPI_RUN_COMMAND: ""
    REGRESSIONTEST_DOUBLE: ""
  stage: test
  retry:
    max: 2
  script:
    - cd $BUILD_DIR
    - ctest -D ExperimentalTest --output-on-failure | tee ctestLog.log || true
    - awk '/The following tests FAILED/,/^Errors while running CTest|^$/'
      ctestLog.log | tee ctestErrors.log
    - xsltproc scripts/CTest2JUnit.xsl Testing/`head -n 1 < Testing/TAG`/Test.xml > JUnitTestResults.xml
    - if [ -s ctestErrors.log ] ; then
      echo "Error during running ctest";
      exit 1;
      fi
    - cd ..
    - source $INSTALL_DIR/bin/GMXRC
    - echo "perl gmxtest.pl -nt $REGRESSIONTEST_TOTAL_RANK_NUMBER -ntomp $REGRESSIONTEST_OMP_RANK_NUMBER -npme $REGRESSIONTEST_PME_RANK_NUMBER $REGRESSIONTEST_DOUBLE $REGRESSIONTEST_MPI_RUN_COMMAND"
    - perl gmxtest.pl -nt $REGRESSIONTEST_TOTAL_RANK_NUMBER -ntomp $REGRESSIONTEST_OMP_RANK_NUMBER -npme $REGRESSIONTEST_PME_RANK_NUMBER $REGRESSIONTEST_DOUBLE $REGRESSIONTEST_MPI_RUN_COMMAND -xml all
  artifacts:
    reports:
      junit: $BUILD_DIR/JUnitTestResults.xml
    paths:
      - $BUILD_DIR/Testing
      - $BUILD_DIR/tests
    when: always
    expire_in: 1 week

gromacs:gcc-7:test:
  extends:
    - .gromacs:base:test
    - .use-gcc7
    - .rules:always
  needs:
    - job: gromacs:gcc-7:build

gromacs:gcc-7-simd-sse41:test:
  extends:
    - .gromacs:base:test
    - .use-gcc7
    - .rules:always
  needs:
    - job: gromacs:gcc-7-simd-sse41:build

gromacs:gcc-7-double:test:
  extends:
    - .gromacs:base:test
    - .use-gcc7
    - .rules:always
  variables:
    REGRESSIONTEST_DOUBLE: "-double"
  needs:
    - job: gromacs:gcc-7-double:build

gromacs:gcc-8:test:
  extends:
    - .gromacs:base:test
    - .use-gcc8
    - .rules:always
  needs:
    - job: gromacs:gcc-8:build

gromacs:gcc-8-cuda-10.2:test:
  extends:
    - .gromacs:base:test
    - .use-cuda
    - .use-gcc8:cuda-10.2
    - .rules:always
  variables:
    KUBERNETES_EXTENDED_RESOURCE_NAME: "nvidia.com/gpu"
    KUBERNETES_EXTENDED_RESOURCE_LIMIT: 1
    REGRESSIONTEST_PME_RANK_NUMBER: 0
    REGRESSIONTEST_TOTAL_RANK_NUMBER: 2
    REGRESSIONTEST_OMP_RANK_NUMBER: 1
    CMAKE_GMXAPI_OPTIONS: "-DGMX_PYTHON_PACKAGE=OFF"
  # TODO: Enable GMX_PYTHON_PACKAGE when dependencies are in Docker image.
  needs:
    - job: gromacs:gcc-8-cuda-10.2:build

gromacs:clang-6:test:
  extends:
    - .gromacs:base:test
    - .use-clang6
    - .rules:always
  variables:
    REGRESSIONTEST_OMP_RANK_NUMBER: 0
  needs:
    - job: gromacs:clang-6:build

gromacs:clang-7:test:
  extends:
    - .gromacs:base:test
    - .use-clang7
    - .rules:always
  needs:
    - job: gromacs:clang-7:build

gromacs:clang-8:test:
  extends:
    - .gromacs:base:test
    - .use-clang8
    - .rules:always
  needs:
    - job: gromacs:clang-8:build

