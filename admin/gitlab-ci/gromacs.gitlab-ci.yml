# Build, test, and install variously configured GROMACS installations.

# Jobs running in first pre-build stage

.gromacs:base:configure:
  extends:
    - .variables:default
  cache: {}
  stage: configure-build
  variables:
    KUBERNETES_CPU_LIMIT: 1
    KUBERNETES_CPU_REQUEST: 1
    KUBERNETES_MEMORY_REQUEST: 2Gi
    CMAKE_COMPILER_SCRIPT: ""
    CMAKE_EXTRA_OPTIONS: ""
    CMAKE_SIMD_OPTIONS: "-DGMX_SIMD=AVX2_256"
    CMAKE_MPI_OPTIONS: "-DGMX_THREAD_MPI=ON"
    CMAKE_PRECISION_OPTIONS: "-DGMX_DOUBLE=OFF"
    CMAKE_BUILD_TYPE_OPTIONS: "-DCMAKE_BUILD_TYPE=Debug"
    CMAKE_GPU_OPTIONS: "-DGMX_GPU=OFF"
  script:
    - echo $CMAKE_COMPILER_SCRIPT
    - echo $CMAKE_EXTRA_OPTIONS
    - echo $CMAKE_SIMD_OPTIONS
    - echo $CMAKE_GPU_OPTIONS
    - echo $CMAKE_MPI_OPTIONS
    - echo $CMAKE_PRECISION_OPTIONS
    - echo $CMAKE_BUILD_TYPE_OPTIONS
    - echo $CMAKE_GMXAPI_OPTIONS
    - if [[ -d $BUILD_DIR ]] ; then
      rm -rf $BUILD_DIR && mkdir $BUILD_DIR ;
      else
      echo "Preparing new build directory" ;
      mkdir $BUILD_DIR ;
      fi
    - cd $BUILD_DIR
    - cmake ../gromacs/
      -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      $CMAKE_COMPILER_SCRIPT
      $CMAKE_EXTRA_OPTIONS
      $CMAKE_SIMD_OPTIONS
      $CMAKE_MPI_OPTIONS
      $CMAKE_PRECISION_OPTIONS
      $CMAKE_BUILD_TYPE_OPTIONS
      $CMAKE_GPU_OPTIONS
      $CMAKE_GMXAPI_OPTIONS
      -DCMAKE_INSTALL_PREFIX=../$INSTALL_DIR -DGMX_COMPILER_WARNINGS=ON
      2>&1 | tee cmakeLog.log
    - awk '/CMake Warning/,/^--|^$/' cmakeLog.log | tee cmakeErrors.log
    - if [ -s cmakeErrors.log  ] ; then echo "Found CMake warning while processing build"; cat cmakeErrors.log ; exit 1; fi
    - cd ..
  artifacts:
    when: always
    paths:
      - $BUILD_DIR

# Templates for configuration stage

gromacs:gcc-7:configure:
  extends:
    - .gromacs:base:configure
    - .use-gcc:base
    - .use-opencl
    - .rules:merge-requests
  needs:
    - job: gromacs:prepare
  image: gromacs/cmake-3.13.0-gcc-7-amdopencl-clfft-openmpi-master
  variables:
    CMAKE_SIMD_OPTIONS: "-DGMX_SIMD=AVX2_256"
    CMAKE_EXTRA_OPTIONS: "-DGMX_EXTERNAL_CLFFT=ON"
    COMPILER_MAJOR_VERSION: 7

gromacs:gcc-8-cuda-11.0:configure:
  extends:
    - .gromacs:base:configure
    - .use-gcc:base
    - .use-cuda
    - .rules:merge-requests
  needs:
    - job: gromacs:prepare
  image: gromacs/cmake-3.15.7-gcc-8-cuda-11.0-nvidiaopencl-clfft-openmpi-master
  variables:
    CMAKE_SIMD_OPTIONS: "-DGMX_SIMD=SSE4.1"
    COMPILER_MAJOR_VERSION: 8

gromacs:clang-TSAN:configure:
  extends:
    - .gromacs:base:configure
    - .use-clang:base
    - .rules:merge-requests
  needs:
    - job: gromacs:prepare
  image: gromacs/cmake-3.13.0-llvm-8-tsan-master
  variables:
    COMPILER_MAJOR_VERSION: 8
    CMAKE_BUILD_TYPE_OPTIONS: "-DCMAKE_BUILD_TYPE=TSAN"

gromacs:clang-8:configure:
  extends:
    - .gromacs:base:configure
    - .use-clang:base
    - .rules:merge-requests
  needs:
    - job: gromacs:prepare
  image: gromacs/cmake-3.15.7-llvm-8-intelopencl-openmpi:2020
  variables:
    COMPILER_MAJOR_VERSION: 8

gromacs:clang-9-mpi:configure:
  extends:
   - .gromacs:base:configure
   - .use-clang:base
   - .use-mpi
   - .rules:merge-requests
  needs:
    - job: gromacs:prepare
  image: gromacs/cmake-3.15.7-llvm-9-openmpi-master
  variables:
    COMPILER_MAJOR_VERSION: 9
    CMAKE_PRECISION_OPTIONS: -DGMX_DOUBLE=ON

gromacs:clang-ASAN:configure:
  extends:
    - .gromacs:base:configure
    - .use-clang:base
    - .rules:merge-requests
  needs:
    - job: gromacs:prepare
  image: gromacs/cmake-3.13.0-llvm-8-tsan-master
  variables:
    COMPILER_MAJOR_VERSION: 8
    CMAKE_BUILD_TYPE_OPTIONS: "-DCMAKE_BUILD_TYPE=ASAN"

gromacs:oneapi-2021.1-beta08-opencl:configure:
  extends:
   - .gromacs:base:configure
   - .use-oneapi:base
   - .use-opencl
   - .rules:merge-requests
  needs:
    - job: gromacs:prepare
  image: gromacs/cmake-3.17.2-oneapi-2021.1-beta08-master
  variables:
    COMPILER_MAJOR_VERSION: 2021
  before_script:
    # Necessary to override gitlab default 'set -e' which breaks Intel's
    # setvar.sh script
    - set +e
    - source /opt/intel/oneapi/setvars.sh
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - tar -xf gmx-source.tar.gz

gromacs:clang-UBSAN:configure:
  extends:
    - .gromacs:base:configure
    - .use-clang:base
    - .rules:merge-requests
  needs:
    - job: gromacs:prepare
  image: gromacs/cmake-3.13.0-llvm-8-tsan-master
  variables:
    COMPILER_MAJOR_VERSION: 8
    CMAKE_BUILD_TYPE_OPTIONS: "-DCMAKE_BUILD_TYPE=UBSAN"

# Jobs running during build stage

.gromacs:base:build:
  stage: build
  script:
    - cd $BUILD_DIR
    - cmake --build . -- -j$KUBERNETES_CPU_LIMIT 2>&1 | tee buildLogFile.log
    - cmake --build . --target tests -- -j$KUBERNETES_CPU_LIMIT 2>&1 | tee testBuildLogFile.log
    - awk '/warning/,/warning.*generated|^$/' buildLogFile.log testBuildLogFile.log
      | grep -v "CMake" | tee buildErrors.log || true
    - grep "cannot be built" buildLogFile.log testBuildLogFile.log | tee -a buildErrors.log || true
    - cmake --build . --target install 2>&1 | tee installBuildLogFile.log
    - if [ -s buildErrors.log ] ; then echo "Found compiler warning during build"; cat buildErrors.log; exit 1; fi
    - for file in `find . -mindepth 1 -name "*.o" ! -type l` ; do echo $file ; rm $file ; done 2>&1 > remove-build-objects.log
    - cd ..
  artifacts:
    when: always
    paths:
      - $BUILD_DIR
      - $INSTALL_DIR/

gromacs:gcc-7:build:
  extends:
    - .variables:default
    - .gromacs:base:build
    - .before_script:default
    - .use-ccache
    - .rules:merge-requests
  image: gromacs/cmake-3.13.0-gcc-7-amdopencl-clfft-openmpi-master
  needs:
    - job: gromacs:gcc-7:configure
      artifacts: true
    - job: gromacs:prepare

gromacs:gcc-8-cuda-11.0:build:
  extends:
    - .variables:default
    - .gromacs:base:build
    - .before_script:default
    - .use-ccache
    - .rules:merge-requests
  image: gromacs/cmake-3.15.7-gcc-8-cuda-11.0-nvidiaopencl-clfft-openmpi-master
  needs:
    - job: gromacs:gcc-8-cuda-11.0:configure
    - job: gromacs:prepare

gromacs:clang-TSAN:build:
  extends:
    - .variables:default
    - .gromacs:base:build
    - .use-clang:base
    - .use-ccache
    - .rules:merge-requests
  image: gromacs/cmake-3.13.0-llvm-8-tsan-master
  needs:
    - job: gromacs:clang-TSAN:configure
    - job: gromacs:prepare

gromacs:clang-ASAN:build:
  extends:
    - .variables:default
    - .gromacs:base:build
    - .use-clang:base
    - .use-ccache
    - .rules:merge-requests
  image: gromacs/cmake-3.13.0-llvm-8-tsan-master
  tags:
    - k8s-scilifelab
  needs:
    - job: gromacs:clang-ASAN:configure
    - job: gromacs:prepare

gromacs:clang-UBSAN:build:
  extends:
    - .variables:default
    - .gromacs:base:build
    - .use-clang:base
    - .use-ccache
    - .rules:merge-requests
  image: gromacs/cmake-3.13.0-llvm-8-tsan-master
  tags:
    - k8s-scilifelab
  needs:
    - job: gromacs:clang-UBSAN:configure
    - job: gromacs:prepare

gromacs:clang-8:build:
  extends:
    - .variables:default
    - .gromacs:base:build
    - .before_script:default
    - .use-ccache
    - .rules:merge-requests
  image: gromacs/cmake-3.15.7-llvm-8-intelopencl-openmpi:2020
  needs:
    - job: gromacs:clang-8:configure
    - job: gromacs:prepare

gromacs:oneapi-2021.1-beta08-opencl:build:
  extends:
    - .variables:default
    - .gromacs:base:build
    - .use-ccache
    - .before_script:default
    - .rules:merge-requests
  image: gromacs/cmake-3.17.2-oneapi-2021.1-beta08-master
  needs:
    - job: gromacs:oneapi-2021.1-beta08-opencl:configure
    - job: gromacs:prepare
  before_script:
    # Necessary to override gitlab default 'set -e' which breaks Intel's
    # setvar.sh script
    - set +e
    - source /opt/intel/oneapi/setvars.sh
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - tar -xf gmx-source.tar.gz

gromacs:clang-9-mpi:build:
  extends:
    - .variables:default
    - .gromacs:base:build
    - .before_script:default
    - .use-ccache
    - .rules:merge-requests
  image: gromacs/cmake-3.15.7-llvm-9-openmpi-master
  needs:
    - job: gromacs:clang-9-mpi:configure
    - job: gromacs:prepare

# Jobs running during test stage

.gromacs:base:test:
  extends:
    - .variables:default
  stage: test
  cache: {}
  retry:
    max: 1
  variables:
    CTEST_RUN_MODE: "ExperimentalTest"
  script:
    - cd $BUILD_DIR
    - export UBSAN_OPTIONS=halt_on_error=1:print_stacktrace=1:suppressions=$CI_PROJECT_DIR/admin/ubsan-suppressions.txt
    # Needed to run MPI enabled code in the docker images, until we set up different users
    - export OMPI_ALLOW_RUN_AS_ROOT=1
    - export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
    - export ASAN_OPTIONS="check_initialization_order=1:detect_invalid_pointer_pairs=1:strict_init_order=true:strict_string_checks=true:detect_stack_use_after_return=true"
    - ctest -D $CTEST_RUN_MODE --output-on-failure | tee ctestLog.log || true
    - awk '/The following tests FAILED/,/^Errors while running CTest|^$/'
      ctestLog.log | tee ctestErrors.log
    - xsltproc $CI_PROJECT_DIR/scripts/CTest2JUnit.xsl Testing/`head -n 1 < Testing/TAG`/*.xml > JUnitTestResults.xml
    - if [ -s ctestErrors.log ] ; then
      echo "Error during running ctest";
      exit 1;
      fi
    - cd ..
  artifacts:
    reports:
      junit: $BUILD_DIR/JUnitTestResults.xml
    paths:
      - $BUILD_DIR/Testing
      - $BUILD_DIR/tests
    when: always
    expire_in: 1 week

.gromacs:base:regressiontest:
  extends:
    - .variables:default
  variables:
    KUBERNETES_CPU_LIMIT: 4
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_MEMORY_REQUEST: 4Gi
    REGRESSIONTEST_TOTAL_RANK_NUMBER: 4
    REGRESSIONTEST_OMP_RANK_NUMBER: 2
    REGRESSIONTEST_PME_RANK_NUMBER: 1
    REGRESSIONTEST_MPI_RUN_COMMAND: ""
    REGRESSIONTEST_DOUBLE: ""
    REGRESSIONTEST_PARALLEL: "-nt"
  stage: test
  cache: {}
  retry:
    max: 1
  script:
    - export LSAN_OPTIONS="suppressions=$CI_PROJECT_DIR/admin/lsan-suppressions.txt:print_suppressions=0"
    - export ASAN_OPTIONS="check_initialization_order=1:detect_invalid_pointer_pairs=1:strict_init_order=true:strict_string_checks=true:detect_stack_use_after_return=true"
    # Needed to run MPI enabled code in the docker images, until we set up different users
    - export OMPI_ALLOW_RUN_AS_ROOT=1
    - export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
    - source $INSTALL_DIR/bin/GMXRC
    - perl gmxtest.pl $REGRESSIONTEST_PARALLEL $REGRESSIONTEST_TOTAL_RANK_NUMBER -ntomp $REGRESSIONTEST_OMP_RANK_NUMBER -npme $REGRESSIONTEST_PME_RANK_NUMBER $REGRESSIONTEST_DOUBLE $REGRESSIONTEST_MPI_RUN_COMMAND -xml all
  artifacts:
    paths:
      - gmxtest.xml
    when: always
    expire_in: 1 week

gromacs:gcc-7:test:
  extends:
    - .gromacs:base:test
    - .rules:merge-requests
    - .before_script:default
  image: gromacs/cmake-3.13.0-gcc-7-amdopencl-clfft-openmpi-master
  variables:
    KUBERNETES_EXTENDED_RESOURCE_NAME: "amd.com/gpu"
    KUBERNETES_EXTENDED_RESOURCE_LIMIT: 1
  tags:
    - k8s-scilifelab
  needs:
    - job: gromacs:gcc-7:build
    - job: gromacs:prepare

gromacs:gcc-8-cuda-11.0:test:
  extends:
    - .gromacs:base:test
    - .rules:merge-requests
    - .before_script:default
  image: gromacs/cmake-3.15.7-gcc-8-cuda-11.0-nvidiaopencl-clfft-openmpi-master
  variables:
    KUBERNETES_EXTENDED_RESOURCE_NAME: "nvidia.com/gpu"
    KUBERNETES_EXTENDED_RESOURCE_LIMIT: 1
  tags:
    - k8s-scilifelab
  needs:
    - job: gromacs:gcc-8-cuda-11.0:build
    - job: gromacs:prepare

gromacs:clang-8:test:
  extends:
    - .gromacs:base:test
    - .rules:merge-requests
    - .before_script:default
  image: gromacs/cmake-3.15.7-llvm-8-intelopencl-openmpi:2020
  needs:
    - job: gromacs:clang-8:build
    - job: gromacs:prepare

gromacs:clang-TSAN:test:
  extends:
    - .gromacs:base:test
    - .rules:merge-requests
    - .before_script:default
  image: gromacs/cmake-3.13.0-llvm-8-tsan-master
  needs:
    - job: gromacs:clang-TSAN:build
    - job: gromacs:prepare

gromacs:clang-ASAN:test:
  extends:
    - .gromacs:base:test
    - .use-clang:base
    - .rules:merge-requests
  image: gromacs/cmake-3.13.0-llvm-8-tsan-master
  variables:
    CTEST_RUN_MODE: "ExperimentalMemCheck"
  tags:
    - k8s-scilifelab
  needs:
    - job: gromacs:clang-ASAN:build
    - job: gromacs:prepare

gromacs:clang-UBSAN:test:
  extends:
    - .gromacs:base:test
    - .use-clang:base
    - .rules:merge-requests
  image: gromacs/cmake-3.13.0-llvm-8-tsan-master
  tags:
    - k8s-scilifelab
  needs:
    - job: gromacs:clang-UBSAN:build
    - job: gromacs:prepare

gromacs:oneapi-2021.1-beta08-opencl:test:
  extends:
    - .gromacs:base:test
    - .rules:merge-requests
  image: gromacs/cmake-3.17.2-oneapi-2021.1-beta08-master
  needs:
    - job: gromacs:oneapi-2021.1-beta08-opencl:build
    - job: gromacs:prepare
  before_script:
    # Necessary to override gitlab default 'set -e' which breaks Intel's
    # setvar.sh script
    - set +e
    - source /opt/intel/oneapi/setvars.sh
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - tar -xf gmx-source.tar.gz

gromacs:clang-9-mpi:test:
  extends:
    - .gromacs:base:test
    - .rules:merge-requests
    - .before_script:default
  image: gromacs/cmake-3.15.7-llvm-9-openmpi-master
  tags:
    - k8s-scilifelab
  needs:
    - job: gromacs:clang-9-mpi:build
    - job: gromacs:prepare

gromacs:gcc-7:regressiontest:
  extends:
    - .gromacs:base:regressiontest
    - .rules:merge-requests
    - .before_script:default
  image: gromacs/cmake-3.13.0-gcc-7-amdopencl-clfft-openmpi-master
  variables:
    KUBERNETES_EXTENDED_RESOURCE_NAME: "amd.com/gpu"
    KUBERNETES_EXTENDED_RESOURCE_LIMIT: 1
    REGRESSIONTEST_PME_RANK_NUMBER: 0
    REGRESSIONTEST_TOTAL_RANK_NUMBER: 2
    REGRESSIONTEST_OMP_RANK_NUMBER: 1
  tags:
    - k8s-scilifelab
  needs:
    - job: gromacs:gcc-7:build
    - job: gromacs:prepare

gromacs:gcc-8-cuda-11.0:regressiontest:
  extends:
    - .gromacs:base:regressiontest
    - .rules:merge-requests
    - .before_script:default
  image: gromacs/cmake-3.15.7-gcc-8-cuda-11.0-nvidiaopencl-clfft-openmpi-master
  variables:
    KUBERNETES_EXTENDED_RESOURCE_NAME: "nvidia.com/gpu"
    KUBERNETES_EXTENDED_RESOURCE_LIMIT: 1
    REGRESSIONTEST_PME_RANK_NUMBER: 0
    REGRESSIONTEST_TOTAL_RANK_NUMBER: 2
    REGRESSIONTEST_OMP_RANK_NUMBER: 1
  tags:
    - k8s-scilifelab
  needs:
    - job: gromacs:gcc-8-cuda-11.0:build
    - job: gromacs:prepare

gromacs:clang-8:regressiontest:
  extends:
    - .gromacs:base:regressiontest
    - .rules:merge-requests
    - .before_script:default
  image: gromacs/cmake-3.15.7-llvm-8-intelopencl-openmpi:2020
  tags:
    - k8s-scilifelab
  needs:
    - job: gromacs:clang-8:build
    - job: gromacs:prepare

gromacs:clang-TSAN:regressiontest:
  extends:
    - .gromacs:base:regressiontest
    - .rules:merge-requests
    - .before_script:default
  image: gromacs/cmake-3.13.0-llvm-8-tsan-master
  tags:
    - k8s-scilifelab
  needs:
    - job: gromacs:clang-TSAN:build
    - job: gromacs:prepare

gromacs:clang-ASAN:regressiontest:
  extends:
    - .gromacs:base:regressiontest
    - .use-clang:base
    - .rules:merge-requests
  image: gromacs/cmake-3.13.0-llvm-8-tsan-master
  tags:
    - k8s-scilifelab
  needs:
    - job: gromacs:clang-ASAN:build
    - job: gromacs:prepare

gromacs:clang-9:regressiontest:
  extends:
    - .gromacs:base:regressiontest
    - .rules:merge-requests
    - .before_script:default
  image: gromacs/cmake-3.15.7-llvm-9-openmpi-master
  variables:
    REGRESSIONTEST_DOUBLE: "-double"
    REGRESSIONTEST_PARALLEL: "-np"
  tags:
    - k8s-scilifelab
  needs:
    - job: gromacs:clang-9-mpi:build
    - job: gromacs:prepare

gromacs:oneapi-2021.1-beta08-opencl:regressiontest:
  extends:
    - .gromacs:base:regressiontest
    - .rules:merge-requests
  image: gromacs/cmake-3.17.2-oneapi-2021.1-beta08-master
  needs:
    - job: gromacs:oneapi-2021.1-beta08-opencl:build
    - job: gromacs:prepare
  before_script:
    # Necessary to override gitlab default 'set -e' which breaks Intel's
    # setvar.sh script
    - set +e
    - source /opt/intel/oneapi/setvars.sh
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - tar -xf gmx-source.tar.gz

