# Mix-in job definitions.

# Centralized definitions of common job parameter values.

.variables:default:
  variables:
    KUBERNETES_CPU_LIMIT: 8
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_MEMORY_LIMIT: 8Gi
    KUBERNETES_EXTENDED_RESOURCE_NAME: ""
    KUBERNETES_EXTENDED_RESOURCE_LIMIT: 0
    CACHE_FALLBACK_KEY: "$CI_JOB_NAME-$CI_JOB_STAGE-master"
    BUILD_DIR: build
    INSTALL_DIR: install
    CMAKE_GMXAPI_OPTIONS: "-DGMX_PYTHON_PACKAGE=ON"
    EXTRA_INSTALLS: "python3-dev python3-setuptools python3-pip python3-pytest"
# TODO: Get these from updated Docker images.

# Our generic before_script to install dependencies and prepare the ccache directory.
.before_script:default:
  before_script:
    - echo $EXTRA_INSTALLS
    - time apt-get -qq update
    - time apt-get -qqy --no-install-suggests --no-install-recommends install
      $EXTRA_INSTALLS
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache

# Rule to run a job only in nightly release-preparation pipelines.
# Jobs that run on schedules, but not for merge requests
.rules:nightly:
  only:
    - web
    - schedules
  except:
    variables:
      - $GROMACS_RELEASE

# Jobs that run for merge requests and schedules
.rules:always:
  only:
    refs:
      - web
      - pushes
      - schedules
      - merge_requests

# Behavioral templates

# Use a persistent compiler cache to speed up rebuilds for a single job.
.use-ccache:
  cache:
    key: "$CI_JOB_NAME-$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/

# Tool chains

.use-cuda:
  variables:
    CMAKE_PRECISION_OPTIONS: "-DGMX_DOUBLE=OFF"
    CUDA_BASE_VERSION: ""
    BUILD_DIR: build-cuda
    CMAKE_EXTRA_OPTIONS: -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda/
    CMAKE_GPU_OPTIONS: -DGMX_GPU=ON

# Base definition, not to be used directly.
# Use version-specific `.use-gccX` definitions when defining jobs.
.use-gcc:base:
  variables:
    BUILD_DIR: build-gcc
    CMAKE_COMPILER_SCRIPT: -DCMAKE_C_COMPILER=gcc-$COMPILER_MAJOR_VERSION -DCMAKE_CXX_COMPILER=g++-$COMPILER_MAJOR_VERSION
  before_script:
    - echo $EXTRA_INSTALLS
    - time apt-get -qq update
    - time apt-get -qqy --no-install-suggests --no-install-recommends install
      $EXTRA_INSTALLS
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - tar -xf gmx-source.tar.gz

.use-gcc7:
  image: gromacs/ci-gcc-7:master
  variables:
    COMPILER_MAJOR_VERSION: 7
  extends:
    - .use-gcc:base

.use-gcc8:
  image: gromacs/ci-gcc-8:master
  variables:
    COMPILER_MAJOR_VERSION: 8
  extends:
    - .use-gcc:base

.use-gcc8:cuda-10.2:
  image: gromacs/ci-gcc-8-cuda-10.2:master
  variables:
    CUDA_BASE_VERSION: "10.2"
    COMPILER_MAJOR_VERSION: 8

# Base definition, not to be used directly.
# Use version-specific `.use-clangX` definitions when defining jobs.
.use-clang:base:
  variables:
    DEBIAN_FRONTEND: noninteractive
    BUILD_DIR: build-clang
    CMAKE_COMPILER_SCRIPT: -DCMAKE_C_COMPILER=clang-$COMPILER_MAJOR_VERSION -DCMAKE_CXX_COMPILER=clang++-$COMPILER_MAJOR_VERSION
  before_script:
    - echo $EXTRA_INSTALLS
    - time apt-get -qq update
    - time apt-get -qqy --no-install-suggests --no-install-recommends install
      $EXTRA_INSTALLS
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - tar -xf gmx-source.tar.gz

.use-clang6:
  image: gromacs/ci-clang-6:master
  variables:
    COMPILER_MAJOR_VERSION: 6
  extends:
    - .use-clang:base

.use-clang7:
  image: gromacs/ci-clang-7:master
  variables:
    COMPILER_MAJOR_VERSION: 7
  extends:
    - .use-clang:base

.use-clang8:
  image: gromacs/ci-clang-8:master
  variables:
    COMPILER_MAJOR_VERSION: 8
  extends:
    - .use-clang:base
